
# =============================================================================
# Functions

# prototype
snippet proto
${1:class_name}.prototype.${2:method_name} = function(${3}) {
  ${4}
};${0}
endsnippet

# function
snippet fun
function ${1:function_name}(${2}) {
  ${3}
}${0}
endsnippet

# anonymous function
snippet f "" w
function(${1}) {
  ${2}
}${0}
endsnippet

# anonymous function assigned to variable
snippet vanf
var ${1:function_name} = function(${2}) {
  ${3}
};${0}
endsnippet

# function assigned to variable
snippet vff
var ${1:function_name} = function $1(${2}) {
  ${3}
};${0}
endsnippet

# immediately-invoked function expression (IIFE)
snippet iife
(function(${1}) {
  ${3}
}(${2}));${0}
endsnippet

# =============================================================================
# Flow Control

# if
snippet if
if (${1:true}) {
  ${2}
}${0}
endsnippet

# if-else
snippet ife
if (${1:true}) {
  ${2}
} else {
  ${3}
}${0}
endsnippet

# ternary operator
snippet tern
${1:/* condition */} ? ${2:/* if true */} : ${3:/* if false */}${0}
endsnippet

# switch
snippet switch
switch (${1:expression}) {
  case '${3:case}':
    ${4}
    break;
  ${5}
  default:
  ${2}
}${0}
endsnippet

# try
snippet try
try {
  ${1}
} catch (${2:e}) {
  ${3:/* handle error */}
}${0}
endsnippet

# try finally
snippet tryf
try {
  ${1}
} catch (${2:e}) {
  ${4:/* handle error */}
} finally {
  ${3:/* be executed regardless of the try / catch result*/}
}${0}
endsnippet

# throw Error
snippet terr
throw new Error('${1:error message}')${0}
endsnippet

# =============================================================================
# Loops

# for-loop
snippet for
for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2++) {
  var ${3:v} = $1[$2];${4:}
}${0}
endsnippet

# while loop
snippet wh
while (${1:/* condition */}) {
  ${2}
}${0}
endsnippet

# do-while loop
snippet do
do {
  ${2}
} while (${1:/* condition */});${0}
endsnippet

# for-in loop
snippet fori
for (var ${1:prop} in ${2:object}) {
  ${3:$2[$1]}
}${0}
endsnippet

# =============================================================================
# Objects

# object method
snippet :f
${1:method_name}: function (${2:attribute}) {
  ${3}
},${0}
endsnippet

# hasOwnProperty
snippet has
hasOwnProperty(${0})
endsnippet

# singleton
snippet sing
function ${1:Singleton} (${2:argument}) {
  // the cached instance
  var instance;

  // rewrite the constructor
  $1 = function $1($2) {
  return instance;
  };

  // carry over the prototype properties
  $1.prototype = this;

  // the instance
  instance = new $1();

  // reset the constructor pointer
  instance.constructor = $1;

  ${3}

  return instance;
}${0}
endsnippet

# Crockford's object function
snippet obj
function object(o) {
  function F() {}
  F.prototype = o;
  return new F();
}${0}
endsnippet

# =============================================================================
# documentation

# docstring
snippet com
/**
 * ${1:description}
 */${0}
endsnippet

snippet @par
@param {${1:type}} ${2:name} ${3:description}${0}
endsnippet

snippet @ret
@return {${1:type}} ${2:description}${0}
endsnippet

# =============================================================================
# JSON

# JSON.parse
snippet jsonp
JSON.parse(${1:jstr});${0}
endsnippet

# JSON.stringify
snippet jsons
JSON.stringify(${1:object});${0}
endsnippet

# =============================================================================
# DOM selectors

# get elements
snippet get
getElementsBy${1:TagName}('${2}')${0}
endsnippet

# get element
snippet gett
getElementBy${1:Id}('${2}')${0}
endsnippet

# elements by class
snippet by.
${1:document}.getElementsByClassName('${2:class}')${0}
endsnippet

# element by ID
snippet by#
${1:document}.getElementById('${2:element ID}')${0}
endsnippet

# query selector
snippet qs
${1:document}.querySelector('${2:CSS selector}')${0}
endsnippet

# query selector all
snippet qsa
${1:document}.querySelectorAll('${2:CSS selector}')${0}
endsnippet

# debugging
snippet de
debugger;${0}
endsnippet

# console.log
snippet cl
console.log(${1});${0}
endsnippet

# console.debug
snippet cd
console.debug(${1});${0}
endsnippet

# console.error
snippet ce
console.error(${1});${0}
endsnippet

# console.table
snippet ct
console.table(${1});${0}
endsnippet

# console.trace
snippet ctr
console.trace(${1:label});${0}
endsnippet

# console.time
snippet ctime
console.time(${1:label});${0}
endsnippet

# console.assert
snippet ca
console.assert(${1:expression}, ${2:obj});${0}
endsnippet

# console.dir
snippet cdir
console.dir(${1:obj});${0}
endsnippet

# =============================================================================
# Misc

# setTimeout function
snippet timeout
setTimeout(function () {${3}}${2}, ${1:10});${0}
endsnippet

